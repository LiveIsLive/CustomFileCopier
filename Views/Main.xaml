<mah:MetroWindow x:Class="ColdShineSoft.CustomFileCopier.Views.Main"
		xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
		xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
		xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
		xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
		xmlns:local="clr-namespace:ColdShineSoft.CustomFileCopier.Views"
		xmlns:viewModels="clr-namespace:ColdShineSoft.CustomFileCopier.ViewModels;assembly=ColdShineSoft.CustomFileCopier.ViewModels"
		xmlns:models="clr-namespace:ColdShineSoft.CustomFileCopier.Models;assembly=ColdShineSoft.CustomFileCopier.Models"
		xmlns:controls="clr-namespace:ColdShineSoft.CustomFileCopier.Controls;assembly=ColdShineSoft.CustomFileCopier.Controls"
		xmlns:mah="http://metro.mahapps.com/winfx/xaml/controls"
		xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks"
		xmlns:cal="http://www.caliburnproject.org"
		xmlns:c="clr-namespace:CalcBinding;assembly=CalcBinding"
		xmlns:md="https://github.com/fantasticfiasco/mvvm-dialogs"
		xmlns:dd="clr-namespace:GongSolutions.Wpf.DragDrop;assembly=GongSolutions.Wpf.DragDrop"
	mc:Ignorable="d" d:DataContext="{d:DesignInstance Type=viewModels:Main,IsDesignTimeCreatable=True}"
		TitleCharacterCasing="Normal" Title="{Binding Title}" Name="Window">
	<mah:MetroWindow.Resources>
		<Style TargetType="TextBox" BasedOn="{StaticResource MahApps.Styles.TextBox}">
			<Setter Property="FontFamily" Value="微软雅黑" />
		</Style>
		<Style TargetType="CheckBox" BasedOn="{StaticResource MahApps.Styles.CheckBox}">
			<Setter Property="FontFamily" Value="微软雅黑" />
		</Style>
		<Style TargetType="ComboBox" BasedOn="{StaticResource MahApps.Styles.ComboBox}">
			<Setter Property="FontFamily" Value="微软雅黑" />
		</Style>
	</mah:MetroWindow.Resources>
	<mah:MetroWindow.RightWindowCommands>
		<mah:WindowCommands>
			<controls:ThemeSetter Theme="{Binding Setting.Theme}" />
			<controls:ConfirmMessage Show="{Binding ShowConfirmMessage}" Message="{Binding ConfirmMessage}" Result="{Binding ConfirmResult}" Title="{Binding Localization.Confirm}" OkText="{Binding Localization.OK}" CancelText="{Binding Localization.Cancel}" />
			<Menu HorizontalAlignment="Right" Margin="0,0,10,3" VerticalAlignment="Center">
				<MenuItem Header="{Binding Localization.Theme}" ItemsSource="{Binding Themes}">
					<MenuItem.ItemContainerStyle>
						<Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
							<Setter Property="cal:Action.TargetWithoutContext" Value="{Binding Path=DataContext,RelativeSource={RelativeSource AncestorType=Window}}" />
							<Setter Property="cal:Message.Attach" Value="ChangeTheme($dataContext)" />
						</Style>
					</MenuItem.ItemContainerStyle>
					<MenuItem.ItemTemplate>
						<HierarchicalDataTemplate ItemsSource="{Binding Children}">
							<TextBlock Text="{Binding Value}" />
						</HierarchicalDataTemplate>
					</MenuItem.ItemTemplate>
				</MenuItem>
				<MenuItem Header="{Binding Localization.Language}" ItemsSource="{Binding InstalledCultures}">
					<MenuItem.ItemContainerStyle>
						<Style TargetType="MenuItem">
							<Setter Property="cal:Action.TargetWithoutContext" Value="{Binding Path=DataContext,RelativeSource={RelativeSource AncestorType=Window}}" />
							<Setter Property="cal:Message.Attach" Value="SelectLanguage($dataContext)" />
						</Style>
					</MenuItem.ItemContainerStyle>
					<MenuItem.ItemTemplate>
						<DataTemplate>
							<TextBlock Text="{Binding NativeName}" Margin="0,6" />
						</DataTemplate>
					</MenuItem.ItemTemplate>
				</MenuItem>
				<MenuItem Header="{Binding Localization.Help}">
					<MenuItem cal:Message.Attach="ShowTutorial" Header="{Binding Localization.Tutorial}" />
					<MenuItem cal:Message.Attach="ShowAboutWindow" Header="{Binding Localization.About}" />
				</MenuItem>
			</Menu>
		</mah:WindowCommands>
	</mah:MetroWindow.RightWindowCommands>
	<DockPanel>
		<StackPanel DockPanel.Dock="Top" Margin="5">
			<DockPanel>
				<CheckBox IsChecked="{Binding Task.CompressToZipFile}" Content="{Binding Localization.CompressToZipFile}" cal:Message.Attach="[Unchecked]=[UncheckedCompressToZipFile]" />
				<controls:SaveFileSelector IsEnabled="{Binding Task.CompressToZipFile}" Path="{Binding Path=Task.CompressFilePath,Mode=TwoWay}" OpenButtonText="{Binding Localization.OpenFileDialog}" />
			</DockPanel>
			<controls:ErrorReminder Text="{Binding Task.DataErrorInfo.CompressFilePath}" />
			<WrapPanel Visibility="{c:Binding Task.CompressToZipFile}" Margin="0,5,0,0">
				<CheckBox IsChecked="{Binding Task.AddNowToCompressFileName}" Content="{Binding Localization.AddNowToCompressFileName}" />
				<WrapPanel>
					<controls:FieldTitle Content="{Binding Localization.NowFormatString}" VerticalAlignment="Center" />
					<TextBox Width="150" Text="{Binding Task.NowFormatString}" />
					<controls:ErrorReminder Text="{Binding Task.DataErrorInfo.NowFormatString}" />
				</WrapPanel>
			</WrapPanel>
		</StackPanel>
		<ToolBar DockPanel.Dock="Top" Background="Red">
			<controls:IconButton Name="AddJob" Icon="Add" Content="{Binding Localization.AddJob}">
				<controls:IconButton.Style>
					<Style TargetType="controls:IconButton" BasedOn="{StaticResource MahApps.Styles.Button.ToolBar}" />
				</controls:IconButton.Style>
			</controls:IconButton>
			<controls:DropDownButton cal:Message.Attach="[Click]=[Run]" Kind="Play" Margin="10,0,0,0" Text="{Binding Localization.Run}" BorderThickness="0">
				<controls:DropDownButton.Items>
					<CheckBox IsChecked="{Binding Task.AutoRunWhenFilesFiltered}" Content="{Binding Localization.AutoRunWhenFilesFiltered}" Margin="10,10" BorderThickness="0" />
				</controls:DropDownButton.Items>
			</controls:DropDownButton>
			<controls:SaveFileSplitButton SelectedFilePath="{Binding OpeningFilePath}" cal:Message.Attach="[SaveFile]=[Save($this.SelectedFilePath)]" Kind="Save" Text="{Binding Localization.Save}" Margin="10,0,0,0" BorderThickness="0">
				<controls:SaveFileSplitButton.Items>
					<controls:SaveFileMenuItem Header="{Binding Localization.SaveAs}" cal:Message.Attach="[SaveFile]=[SaveAs($this.SelectedFilePath)]" />
				</controls:SaveFileSplitButton.Items>
			</controls:SaveFileSplitButton>
			<controls:OpenFileSplitButton DockPanel.Dock="Right" cal:Message.Attach="[OpenFile]=[Open($this.SelectedFilePath)]" Kind="FolderOpened" Margin="10,0,0,0" Text="{Binding Localization.Open}" BorderThickness="0">
				<controls:OpenFileSplitButton.Items>
					<StackPanel>
						<mah:MetroHeader Content="{Binding Localization.RecentFiles}" Margin="5" FontWeight="Bold" />
						<ItemsControl ItemsSource="{Binding RecentFiles}">
							<ItemsControl.ItemsPanel>
								<ItemsPanelTemplate>
									<StackPanel />
								</ItemsPanelTemplate>
							</ItemsControl.ItemsPanel>
							<ItemsControl.ItemTemplate>
								<DataTemplate>
									<MenuItem cal:Message.Attach="Open($dataContext)" cal:Action.TargetWithoutContext="{Binding Path=DataContext,RelativeSource={RelativeSource AncestorType=Window}}">
										<MenuItem.Header>
											<DockPanel>
												<controls:IconButton DockPanel.Dock="Right" cal:Message.Attach="RemoveRecentFile($dataContext)" Icon="Close" Margin="20,0,0,0" Padding="0" BorderThickness="0" Background="Transparent" />
												<TextBlock Text="{Binding}" VerticalAlignment="Center" />
											</DockPanel>
										</MenuItem.Header>
									</MenuItem>
								</DataTemplate>
							</ItemsControl.ItemTemplate>
						</ItemsControl>
					</StackPanel>
				</controls:OpenFileSplitButton.Items>
			</controls:OpenFileSplitButton>
		</ToolBar>
		<controls:ErrorReminder DockPanel.Dock="Top" Text="{Binding Task.DataErrorInfo.Job}" />
		<controls:TabControl ItemsSource="{Binding Task.Jobs}" SelectedItem="{Binding SelectedJob}" IsFocus="{Binding UpdateJobBinding}">
			<controls:TabControl.Resources>
				<Style TargetType="mah:MetroTabItem">
					<Setter Property="CloseButtonEnabled" Value="True" />
				</Style>
			</controls:TabControl.Resources>
			<controls:TabControl.ItemTemplate>
				<DataTemplate>
					<TextBlock Text="{Binding Name}" FontFamily="微软雅黑" />
				</DataTemplate>
			</controls:TabControl.ItemTemplate>
			<controls:TabControl.ContentTemplate>
				<DataTemplate>
					<DockPanel>
						<StackPanel DockPanel.Dock="Top" Margin="0,5,5,0">
							<StackPanel.Resources>
								<Style TargetType="DockPanel">
									<Setter Property="Margin" Value="0,5,0,0" />
								</Style>
								<Style TargetType="controls:FieldTitle">
									<Setter Property="DockPanel.Dock" Value="Left" />
									<Setter Property="DataContext" Value="{Binding RelativeSource={RelativeSource AncestorType=Window},Path=DataContext}" />
									<Setter Property="Width" Value="200" />
									<Setter Property="HorizontalContentAlignment" Value="Right" />
									<Setter Property="VerticalContentAlignment" Value="Center" />
								</Style>
							</StackPanel.Resources>
							<DockPanel>
								<controls:FieldTitle Content="{Binding Localization.Name}" />
								<TextBox Text="{Binding Name}" />
							</DockPanel>
							<controls:ErrorReminder Text="{Binding DataErrorInfo.Name}" />
							<DockPanel>
								<controls:FieldTitle Content="{Binding Localization.SourceDirectory}" />
								<controls:DirectorySelector Path="{Binding SourceDirectoryPath}" OpenButtonText="{Binding RelativeSource={RelativeSource AncestorType=Window},Path=DataContext.Localization.OpenFileDialog}" />
							</DockPanel>
							<controls:ErrorReminder Text="{Binding DataErrorInfo.SourceDirectoryPath}" />

							<StackPanel Visibility="{c:Binding '!Task.CompressToZipFile'}">
								<DockPanel>
									<controls:FieldTitle Content="{Binding Localization.ResultHandler}" />
									<ComboBox ItemsSource="{Binding Path=DataContext.ResultHandlers,RelativeSource={RelativeSource AncestorType=Window}}" SelectedItem="{Binding Path=ResultHandler,Mode=TwoWay}" DisplayMemberPath="Name" />
								</DockPanel>
								<DockPanel>
									<controls:FieldTitle Content="{Binding Localization.TargetDirectory}" />
									<Grid>
										<controls:DirectorySelector Path="{Binding TargetDirectoryPath}" Visibility="{c:Binding !ResultHandler.Remote}"  OpenButtonText="{Binding Path=DataContext.Localization.OpenFileDialog,RelativeSource={RelativeSource AncestorType=Window}}" />
										<TextBox Text="{Binding TargetDirectoryPath}" Visibility="{c:Binding ResultHandler.Remote}" />
									</Grid>
								</DockPanel>
								<controls:ErrorReminder Text="{Binding DataErrorInfo.TargetDirectoryPath}" />
								<WrapPanel Visibility="{c:Binding ResultHandler.Remote}" Margin="0,5,0,0">
									<WrapPanel>
										<controls:FieldTitle Content="{Binding Localization.Server}" />
										<StackPanel>
											<TextBox Text="{Binding TargetServer}" Width="120" />
											<controls:ErrorReminder Text="{Binding DataErrorInfo.TargetServer}" />
										</StackPanel>
									</WrapPanel>
									<WrapPanel>
										<controls:FieldTitle Content="{Binding Localization.Port}" Width="Auto" Margin="20,0,0,0" />
										<mah:NumericUpDown Value="{Binding TargetPort}" Width="90" />
									</WrapPanel>
									<WrapPanel>
										<controls:FieldTitle Content="{Binding Localization.UserName}" Width="Auto" Margin="20,0,0,0" />
										<TextBox Text="{Binding TargetUserName}" Width="100" />
									</WrapPanel>
									<WrapPanel>
										<controls:FieldTitle Content="{Binding Localization.Password}" Width="Auto" Margin="20,0,0,0" />
										<PasswordBox Width="100" mah:PasswordBoxBindingBehavior.Password="{Binding TargetPassword}" />
									</WrapPanel>
								</WrapPanel>
							</StackPanel>
							
							
							
							<DockPanel>
								<controls:FieldTitle Content="{Binding Localization.ConditionDesignMode}" />
								<ItemsControl ItemsSource="{Binding Path=DataContext.ConditionModes,RelativeSource={RelativeSource AncestorType=Window}}" VerticalAlignment="Center">
									<ItemsControl.ItemsPanel>
										<ItemsPanelTemplate>
											<WrapPanel />
										</ItemsPanelTemplate>
									</ItemsControl.ItemsPanel>
									<ItemsControl.ItemTemplate>
										<DataTemplate>
											<RadioButton Tag="{Binding Path=DataContext.ConditionMode,RelativeSource={RelativeSource AncestorType=ItemsControl}}" IsChecked="{c:Binding 'DataContext==Tag',RelativeSource={RelativeSource Mode=Self}}" cal:Message.Attach="[Checked]=[SetConditionMode($dataContext)]" GroupName="ConditionMode" Margin="0,0,20,0">
												<RadioButton.Content>
													<controls:GetDictionaryValue Dictionary="{Binding Path=DataContext.Localization.ConditionMode,RelativeSource={RelativeSource AncestorType=Window}}" Key="{Binding}" />
												</RadioButton.Content>
											</RadioButton>
										</DataTemplate>
									</ItemsControl.ItemTemplate>
								</ItemsControl>
							</DockPanel>
						</StackPanel>
						<Grid>
							<DockPanel Visibility="{c:Binding 'ConditionMode==models:ConditionMode.Designer'}">
								<WrapPanel DockPanel.Dock="Top">
									<controls:IconButton cal:Message.Attach="[Click]=[AddCondition($dataContext)]" Icon="Add" Margin="5,10,0,0" Content="{Binding RelativeSource={RelativeSource AncestorType=Window},Path=DataContext.Localization.AddCondition}"  HorizontalAlignment="Left" />
									<controls:ErrorReminder Text="{Binding DataErrorInfo.Condition}" />
								</WrapPanel>
								<!-- 如果不设置FalseToVisibility，可能会出现看不到表头行的情况 -->
								<!-- 不知道为什么没有行的时候，表头显示有问题，大部分被遮住，所以设置了有行才显示 -->
								<DataGrid ItemsSource="{Binding Conditions}" dd:DragDrop.IsDragSource="True" dd:DragDrop.IsDropTarget="True" dd:DragDrop.ShowAlwaysDropTargetAdorner="True" dd:DragDrop.DropHandler="{Binding Path=DataContext,RelativeSource={RelativeSource AncestorType=Window}}" Visibility="{c:Binding 'Conditions.Count!=0', FalseToVisibility=Hidden}" AutoGenerateColumns="False" CanUserAddRows="False" Margin="0,5,0,0">
									<DataGrid.Columns>
										<DataGridTemplateColumn>
											<DataGridTemplateColumn.Header>
												<!--如果使用FindAncestor这种模式绑定的话，当初始SelectedItem不是这个Tab的时候会报错绑定不了-->
												<!--<TextBlock Text="{Binding RelativeSource={RelativeSource AncestorType=Window},Path=DataContext.Localization.Connective}" />-->
												<TextBlock Text="{Binding Path=DataContext.Localization.Connective,Source={x:Reference Window}}" />
											</DataGridTemplateColumn.Header>
											<DataGridTemplateColumn.CellTemplate>
												<DataTemplate>
													<ComboBox ItemsSource="{Binding RelativeSource={RelativeSource AncestorType=Window},Path=DataContext.Connectives}" SelectedItem="{Binding Path=Connective,UpdateSourceTrigger=PropertyChanged}" Tag="{Binding RelativeSource={RelativeSource AncestorType=DataGrid},Path=DataContext}" Visibility="{c:Binding 'Tag.Conditions[0]!=DataContext',RelativeSource={RelativeSource Mode=Self}}" MinWidth="75">
														<ComboBox.ItemTemplate>
															<DataTemplate>
																<controls:GetDictionaryValue Dictionary="{Binding RelativeSource={RelativeSource AncestorType=Window},Path=DataContext.Localization.LogicalConnective}" Key="{Binding}" />
							            					</DataTemplate>
														</ComboBox.ItemTemplate>
													</ComboBox>
												</DataTemplate>
											</DataGridTemplateColumn.CellTemplate>
										</DataGridTemplateColumn>
										<DataGridTemplateColumn>
											<DataGridTemplateColumn.Header>
												<TextBlock Text="{Binding Path=DataContext.Localization.LeftBracket,Source={x:Reference Window}}" />
											</DataGridTemplateColumn.Header>
											<DataGridTemplateColumn.CellTemplate>
												<DataTemplate>
													<controls:ToggleBoolean Value="{Binding Path=LeftBracket,UpdateSourceTrigger=PropertyChanged}" TrueContent="(" />
												</DataTemplate>
											</DataGridTemplateColumn.CellTemplate>
										</DataGridTemplateColumn>
										<DataGridTemplateColumn>
											<DataGridTemplateColumn.Header>
												<TextBlock Text="{Binding Path=DataContext.Localization.Property,Source={x:Reference Window}}" />
											</DataGridTemplateColumn.Header>
											<DataGridTemplateColumn.CellTemplate>
												<DataTemplate>
													<ComboBox ItemsSource="{Binding RelativeSource={RelativeSource AncestorType=Window},Path=DataContext.Properties}" SelectedItem="{Binding Path=Property,UpdateSourceTrigger=PropertyChanged}" MinWidth="150">
														<ComboBox.ItemTemplate>
															<DataTemplate>
																<controls:GetDictionaryValue Dictionary="{Binding RelativeSource={RelativeSource AncestorType=Window},Path=DataContext.Localization.Properties}" Key="{Binding Name}" />
															</DataTemplate>
														</ComboBox.ItemTemplate>
													</ComboBox>
												</DataTemplate>
											</DataGridTemplateColumn.CellTemplate>
										</DataGridTemplateColumn>
										<DataGridTemplateColumn>
											<DataGridTemplateColumn.Header>
												<TextBlock Text="{Binding Path=DataContext.Localization.Operator,Source={x:Reference Window}}" />
											</DataGridTemplateColumn.Header>
											<DataGridTemplateColumn.CellTemplate>
												<DataTemplate>
													<ComboBox ItemsSource="{Binding Property.AllowOperators}" SelectedItem="{Binding Path=Operator,UpdateSourceTrigger=PropertyChanged}">
														<ComboBox.ItemTemplate>
															<DataTemplate>
																<controls:GetDictionaryValue Dictionary="{Binding RelativeSource={RelativeSource AncestorType=Window},Path=DataContext.Localization.Operators}" Key="{Binding Name}" />
															</DataTemplate>
														</ComboBox.ItemTemplate>
													</ComboBox>
												</DataTemplate>
											</DataGridTemplateColumn.CellTemplate>
										</DataGridTemplateColumn>
										<DataGridTemplateColumn>
											<DataGridTemplateColumn.Header>
												<TextBlock Text="{Binding Path=DataContext.Localization.Value,Source={x:Reference Window}}" />
											</DataGridTemplateColumn.Header>
											<DataGridTemplateColumn.CellTemplate>
												<DataTemplate>
													<!--<TextBlock Text="{Binding ValueType}" />-->
													<ContentControl>
														<ContentControl.Style>
															<Style TargetType="ContentControl">
																<Style.Triggers>
																	<DataTrigger Binding="{Binding ValueType}" Value="{x:Static models:PropertyTypes.String}">
																		<Setter Property="ContentTemplate">
																			<Setter.Value>
																				<DataTemplate>
																					<TextBox Text="{Binding Path=DataContext.StringValue,RelativeSource={RelativeSource AncestorType=ContentControl}}" MinWidth="100" />
																				</DataTemplate>
																			</Setter.Value>
																		</Setter>
																	</DataTrigger>
																	<DataTrigger Binding="{Binding ValueType}" Value="{x:Static models:PropertyTypes.Int64}">
																		<Setter Property="ContentTemplate">
																			<Setter.Value>
																				<DataTemplate>
																					<mah:NumericUpDown Value="{Binding Path=DataContext.LongValue,RelativeSource={RelativeSource AncestorType=ContentControl}}" MinWidth="100" />
																				</DataTemplate>
																			</Setter.Value>
																		</Setter>
																	</DataTrigger>
																	<DataTrigger Binding="{Binding ValueType}" Value="{x:Static models:PropertyTypes.DateTime}">
																		<Setter Property="ContentTemplate">
																			<Setter.Value>
																				<DataTemplate>
																					<mah:DateTimePicker SelectedDateTime="{Binding Path=DataContext.DateTimeValue,RelativeSource={RelativeSource AncestorType=ContentControl}}" />
																				</DataTemplate>
																			</Setter.Value>
																		</Setter>
																	</DataTrigger>
																</Style.Triggers>
															</Style>
														</ContentControl.Style>
													</ContentControl>
												</DataTemplate>
											</DataGridTemplateColumn.CellTemplate>
										</DataGridTemplateColumn>
										<DataGridTemplateColumn>
											<DataGridTemplateColumn.Header>
												<TextBlock Text="{Binding Path=DataContext.Localization.RightBracket,Source={x:Reference Window}}" />
											</DataGridTemplateColumn.Header>
											<DataGridTemplateColumn.CellTemplate>
												<DataTemplate>
													<controls:ToggleBoolean Value="{Binding Path=RightBracket,UpdateSourceTrigger=PropertyChanged}" TrueContent=")" />
												</DataTemplate>
											</DataGridTemplateColumn.CellTemplate>
										</DataGridTemplateColumn>
										<DataGridTemplateColumn Width="*">
											<DataGridTemplateColumn.CellTemplate>
												<DataTemplate>
													<WrapPanel>
														<WrapPanel.Resources>
															<Style TargetType="controls:IconButton">
																<Setter Property="BorderThickness" Value="0" />
																<Setter Property="Background" Value="Transparent" />
															</Style>
														</WrapPanel.Resources>
														<controls:IconButton cal:Message.Attach="MoveUpCondition($this.Tag,$this.DataContext)" Tag="{Binding Path=DataContext,RelativeSource={RelativeSource AncestorType=DataGrid}}" Icon="ArrowUp" Visibility="{c:Binding 'Tag.FirstCondition!=DataContext', FalseToVisibility=Hidden,RelativeSource={RelativeSource Mode=Self}}" BorderThickness="0" Background="Transparent" />
														<controls:IconButton cal:Message.Attach="MoveDownCondition($this.Tag,$this.DataContext)" Tag="{Binding Path=DataContext,RelativeSource={RelativeSource AncestorType=DataGrid}}" Icon="ArrowDown" Visibility="{c:Binding 'Tag.LastCondition!=DataContext', FalseToVisibility=Hidden,RelativeSource={RelativeSource Mode=Self}}" BorderThickness="0" Background="Transparent" />
														<controls:IconButton cal:Message.Attach="RemoveCondition($this.Tag,$this.DataContext)" Tag="{Binding Path=DataContext,RelativeSource={RelativeSource AncestorType=DataGrid}}" Icon="Close" BorderThickness="0" Background="Transparent" />
														<controls:ErrorReminder Text="{Binding DataErrorInfo.StringValue}" BorderThickness="0" Background="Transparent" />
													</WrapPanel>
												</DataTemplate>
											</DataGridTemplateColumn.CellTemplate>
										</DataGridTemplateColumn>
									</DataGrid.Columns>
								</DataGrid>
							</DockPanel>
							<DockPanel Visibility="{c:Binding 'ConditionMode==models:ConditionMode.Expression'}" Margin="0,20,0,0">
								<controls:ErrorReminder DockPanel.Dock="Top" Text="{Binding DataErrorInfo.CustomExpression}" />
								<TextBox Text="{Binding CustomExpression}" AcceptsReturn="True" TextWrapping="Wrap" AcceptsTab="True" VerticalContentAlignment="Top" />
							</DockPanel>
						</Grid>
					</DockPanel>
				</DataTemplate>
			</controls:TabControl.ContentTemplate>
		</controls:TabControl>
	</DockPanel>
</mah:MetroWindow>