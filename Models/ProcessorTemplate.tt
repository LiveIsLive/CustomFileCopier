<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>

using System.Linq;
public class FileFilter:ColdShineSoft.CustomFileCopier.Models.FileFilter
{
	<# foreach(IProperty property in this.Conditions.Select(c=>c.Property).Distinct()){ #>
		protected readonly <#= ExtentionMethods.GetGenericTypeFullName(property) #> <#= property.VariableName #>;
	<# } #>

	<# foreach(IOperator o in this.Conditions.Select(c=>c.Property).Distinct()){ #>
		protected readonly <#= ExtentionMethods.GetGenericTypeFullName(o) #> <#= o.VariableName #>;
	<# } #>	`

	public FileFilter(System.Collections.Generic.IEnumerable<ColdShineSoft.CustomFileCopier.Models.Condition> conditions):base(conditions)
	{
		ColdShineSoft.CustomFileCopier.Models.Condition condition;
		<# for(int i=0;i<this.Conditions.Count();i++)
		{
			Condition condition=this.Conditions.ElementAt(i);
		#>
			condition=this.Conditions.ElementAt(<#= i #>);
			this.<#= condition.Property.VariableName #>=(<#= ExtentionMethods.GetGenericTypeFullName(condition.Property) #>)condition.Property;
			this.<#= condition.Operator.VariableName #>=(<#= ExtentionMethods.GetGenericTypeFullName(condition.Operator) #>)condition.Operator;
		<# } #>
	}

	public override bool Check(System.IO.FileInfo fileInfo)
	{

	}
}